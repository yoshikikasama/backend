"""ユニットテスト

■テストにテスト対象と同等の実装を書かない

■1つのテストメソッドでは1つの項目のみ確認する

■テストしにくい実装は設計が悪い
　テストをより良く書こうとするのではなく、そもそも実装の設計を見直す。
　細かい条件や分岐の処理を別の関数にする。
　全体を通すような処理は分岐を網羅するだけのテストメソッドで十分とする。
　細かい条件はここに分離した単体テスト内でテストするので保証しなくても良い。
　テストしやすい設計＝＝メンテナンス性の高い良い設計
　mockなどで無理に単体テストを通すよりも関数設計が良くならないか、データ設計、モデル設計が良くならないか
　と考えることが大切。
■ベストプラクティス
・関数の引数やフィクスチャーに大げさな値が必要な設計にしない
・処理を分離して全ての動作確認に全てのデータが必要ないようにする
・関数やクラスを分離して、細かいテストは分離した関数、クラスを対象に行う
　（分離した関数を呼び出す関数では細かいテストは書かないようにする。)

■外部APIのMock化
・単体テストから外部環境への依存を排除する。requestsがバックエンドサーバーへアクセスするのを
responsesを使ってmockする。

fixture(conftest)をうまく活用する。
parametrizeをうまく活用する。
"""
