"""ユニットテスト

■テストにテスト対象と同等の実装を書かない

■1つのテストメソッドでは1つの項目のみ確認する

■テストしにくい実装は設計が悪い
 テストをより良く書こうとするのではなく、そもそも実装の設計を見直す。
 細かい条件や分岐の処理を別の関数にする。
 全体を通すような処理は分岐を網羅するだけのテストメソッドで十分とする。
 細かい条件はここに分離した単体テスト内でテストするので保証しなくても良い。
 テストしやすい設計＝＝メンテナンス性の高い良い設計
 mockなどで無理に単体テストを通すよりも関数設計が良くならないか、データ設計、モデル設計が良くならないか
 と考えることが大切。
■ベストプラクティス
・関数の引数やフィクスチャーに大げさな値が必要な設計にしない
・処理を分離して全ての動作確認に全てのデータが必要ないようにする
・関数やクラスを分離して、細かいテストは分離した関数、クラスを対象に行う
（分離した関数を呼び出す関数では細かいテストは書かないようにする。)

■外部APIのMock化
・単体テストから外部環境への依存を排除する。requestsがバックエンドサーバーへアクセスするのを
responsesを使ってmockする。
・外部のAPIやサービス
 responsesを使ってmock化する
・データベースやサーバーなどのミドルウェア(MysqlやRedisなど)
 RDBはbackendをSQLiteに置き換える。
 Redisはfakeredisに置き換える
・クラウドサービス(S3, DynamoDBなど)
 motoでモックに置き換える。
・単体テストを実行するPC環境やディレクトリー構成
 標準ライブラリーのtempfileを使う
 プロジェクト内の仮想環境venvなど、バージョン管理システムで管理されないファイルに依存しない。

■test用のデータはtest終了後に削除する
 tempfileモジュールにあるNamedTemporaryFileを使うと一時的なファイルが作られ、
 ファイルクローズと同時に自動的に削除してくれる。

■便利なテストユーティリティー
 django.test.TestCase・・・Djangoのプロジェクトをテストする場合に便利なassertメソッドを持っているテストケースクラス。
 django.core.mail.outbox・・・テスト中に送信されたメールが保存されているオブジェクト。メールの中身が正しいかをテストできる。
 freezegun・・・mock.patchできないdatetime.nowを簡単にパッチできる。
 pytest・・・tempfileをより便利に使えるtmpdirなど付属の機能が提供されている。
 pytest-django・・・pytestでDjangoプロジェクトをテストする場合に使う
 pytest-freezegun・・・freezegunをpytestで便利に使えるツール
 pytest-responses・・・responsesをpytestで便利に使えるツール

■ユーティリティーのまとめ
 プロジェクト内で汎用的に使える機能をテストユーティリティーとしてまとめておく。
 testing.pyモジュールなどに関数などを分離してまとめておく。
 fragile fixtureのサイトでも確認。

■テストケースごとにテストデータを用意する。
 fixtureを使い回すと他の開発者が別のテストを修正する目的で変更したら既存のテストが失敗することになる。
 fixture(conftest)をうまく活用する。
 parametrizeをうまく活用する。 
■必要十分なテストデータを用意する。
 テストをしやすいように条件となる数値を引数として用意する。テストの時に数値を変えて実行する。
 システムが大きくなればなるほど、テストにかかる時間が増えていきます。
 テストの準備のために大量にデータを作らなければならない場面に遭遇したら、本当に大量のデータが必要か、確認する。
■条件に合致しないテストデータも用意する
 いくら条件を指定しても合致するデータが存在しないので、本当に条件に合致したデータだけが絞り込まれているかという点が
 十分に確認できていないケースがある。
■テストの実行順序に依存しないテストを書く
 データを使いまわさない。
■戻り値がリストの関数のテストで要素数をテストする
 要素数を確認しないとリストに3つ目の値がある可能性があるので、必ず確認する。
■テストで確認する内容に関するデータのみ作成する
 テストで確認する内容に関係するデータのみ作成する
 テストに関係しないデータ、パラメーターを作らない、指定しない。
 テストに関係するデータ、パラメーターを作る、指定する(デフォルトに依存しない)
■過剰なmockを避ける
 mockは外部アクセスなど、単体テストに含めたくない項目のみに使う。データベースアクセスなどは、factory-boyで
 比較的簡単にデータが作れるので、mockは使わない方がいい。
"""
